var t,e;(t=self.document)&&!t.getElementById("livereloadscript")&&((e=t.createElement("script")).async=1,e.src="//"+(self.location.host||"localhost").split(":")[0]+":35729/livereload.js?snipver=1",e.id="livereloadscript",t.getElementsByTagName("head")[0].appendChild(e));import{Component as n,EventUtils as i,EventDispatcher as o,View as s,BindingUtils as l,ElementUtils as a,ViewNavigator as d,EventRouter as c,ViewManager as r,Router as u,NavigationEvent as h,EventBroadCaster as p}from"https://www.unpkg.com/@jsactionsframework/jsactions@1.0.2/dist/jsactions.min.js";class m extends n{constructor(t=null,e=null,n=null,i=!0){super(t,e,n,i)}init(t="Button",e="defaultform"){this.label=t,this.formId=e,super.init()}initComponent(){super.initComponent()}createDOMContent(){super.createDOMContent();let t=this.createComponentHTML();this.addToComponentElement(t)}addEventHandler(){if(super.addEventHandler(),null!=this.componentElement){this.componentElement.querySelector("input[type='button']").addEventListener("click",t=>{this.clickHandler(t)})}}clickHandler(t){t.preventDefault();let e=t.target;console.log(e.value+" :: HTML Button Click Event Received ::"),console.log("MyButton Custom Click Event Dispatched"),this.dispatchEvent(i.CLICK,this)}setComponentEnabled(){console.log(this.id+" Enabled = "+this.enabled),super.setComponentEnabled();let t=this.componentElement.querySelector("input[type='button']");0==this.enabled?(t.setAttribute("disabled","disabled"),t.classList.add("disablebutt")):t.hasAttribute("disabled")&&(t.removeAttribute("disabled"),t.classList.remove("disablebutt"))}setComponentReadOnly(){super.setComponentReadOnly()}createComponentHTML(){return`<input type="button" class="mybutton" value="${this.label}">`}}class v extends o{constructor(){super(),this.value=!1,this.clickCount=1}incrementClick(){this.clickCount++,this.dispatchEvent("incrementEvent",this)}decrementClick(){this.clickCount--,this.dispatchEvent("decrementEvent",this)}getClickCount(){return this.clickCount}setValue(){this.value=!this.value,console.log("HelloWorldModel : value = "+this.value),this.dispatchEvent("change",this)}getValue(){return this.value}}class B extends s{constructor(t,e,n,i,o){super(t,e,n,i,o)}initView(){super.initView(),this.cmpButton1=null,this.cmpButton2=null,this.cmpButton3=null,this.decreButton=null,this.myButtonModel=new v}bindView(){super.bindView(),this.bindButtons()}addViewHandler(){super.addViewHandler(),this.cmpButton2.addEventListener("click",t=>{console.log("clicked recevied"+t.target.enabled)})}bindButtons(){let t=document.querySelector(".demobuttState"),e=document.querySelector(".democlick");l.addBinding(this.cmpButton1,"","click",this.myButtonModel,"incrementClick",!1),l.addBinding(this.decreButton,"","click",this.myButtonModel,"decrementClick",!1),l.addBinding(this.myButtonModel,"getClickCount","incrementEvent",e,"innerHTML",!1),l.addBinding(this.myButtonModel,"getClickCount","decrementEvent",e,"innerHTML",!1),l.addBinding(this.cmpButton2,"enabled","click",this.myButtonModel,"setValue",!1),l.addBinding(this.myButtonModel,"getValue","change",this.cmpButton3,"enabled",!1),l.addBinding(this.myButtonModel,"getValue","change",t,"innerHTML",!1)}createViewContent(){let t=this.createViewHTML();this.addToViewElement(t),this.cmpButton1=new m("cmpBtn",this.id,"helloContainer",!0),this.cmpButton1.init("My Component"),this.cmpButton1.attach(),this.cmpButton1.enabled=!0,this.decreButton=new m("decreBtn",this.id,"helloContainer",!0),this.decreButton.init("Decrement Button"),this.decreButton.attach(),this.decreButton.enabled=!0;a.container("helloContainer",this.id);this.cmpButton2=new m("cmpBtn2",this.id,"bindDemoContainer",!0),this.cmpButton2.init("Toggle Button"),this.cmpButton2.attach(),this.cmpButton2.enabled=!0;let e=a.container("bindDemoContainer",this.id);this.addBreakElement(e),this.cmpButton3=new m("cmpBtn3",this.id,"bindDemoContainer",!0),this.cmpButton3.init("Demo Button"),this.cmpButton3.attach(),this.cmpButton3.enabled=!1,this.addBreakElement(e),this.addBreakElement(e)}createViewHTML(){return`\n         <div class="viewbg">\n            <div>\n            <p><h2>JSactionsjs AppStarter </span></h2></p>\n                <p><h3>Demo 1 : View Id is - <span class="redtext">${this.id} </span></h3></p>\n                <p><h4>Static View Contents Hello World !!!</h4></p>\n            </div>\n            <hr>\n            \n            <div> \n            <p><h3>Demo 2 : Verifying Passing View Parameter during navigation event</h3></p>\n            <p> View Parameter Received ::: <span class="redtext">${this.navParams}</span> </p>\n            </div>\n            <hr>\n            \n                <div>\n                   <p> <h3>Demo 3 : Verifying Binding Custom Component Click using Model</h3></p>\n                   <p> Click on below "My Component" Button to count number of clicks</p>\n                   <p> <h4> "My Component" Button  Clicked <label class="democlick redtext" >0</label> times </h4></p>\n                </div>\n            <div class="jsact-container helloContainer"></div> \n            <hr>\n            <div>\n                   <p> <h3>Demo 4 : Verifying Binding Component Property using Model</h3></p>\n                   <p> Click on below "Toggle Button" to Enable or Disable the "Demo Button" </p>\n                   <p> <h4> "Demo Button" State : <label class="demobuttState redtext" >false</label> in Model </h4></p>\n                </div>\n            <div class="jsact-container bindDemoContainer"></div> \n        </div>\n        `}addBreakElement(t){t.insertAdjacentHTML("beforeend","</br></br>")}removeViewHandler(){super.removeViewHandler()}}class b extends d{constructor(t,e,n){super(t,e,n)}initNavigator(){this.history=!1,this.initEventRoutes()}createView(t,e,n,i,o){let s=null;switch(t){case"helloview":s=new B(t,e,n,i,o);break;default:s=new View(t,e,n,i,o)}return s}initEventRoutes(){this.eventRouter=new c([{navEvent:"Hello_NavEvent",viewstackId:"HelloWorldStack",viewId:"helloview",path:"/hello"}])}}class C extends r{initialize(){super.initialize(),this.initRoutes()}createNavigator(t,e,n){let i=null;switch(t){case"simpleNavigator":i=new b(t,e,n);break;default:i=new d(t,e,n)}return i}initRoutes(){this.routes=new u([{path:"/hello",navigatorId:"simpleNavigator",parentId:"root"}])}}class g{constructor(){this.initialize()}initialize(){this.viewmanager=new C}start(){let t=new h(i.NAV_CHANGE_EVENT,"Hello_NavEvent","Message :: Hello World !!!","/hello");p.navEventChannel.dispatchEvent(t)}}export{C as AppViewManager,g as Application,v as HelloWorldModel,B as HelloWorldView,m as MyButton,b as SimpleNavigator};
